<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference
  PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" class="- topic/topic       reference/reference " ditaarch:DITAArchVersion="1.2" id="lkw1477914079778" xml:lang="en-us">
	
	
	<title class="- topic/title ">Error Synchronization Barrier </title>
	<shortdesc class="- topic/shortdesc ">The <term class="- topic/term ">Error Synchronization Barrier</term> (<codeph class="+ topic/ph pr-d/codeph ">ESB</codeph>) instruction synchronizes unrecoverable system
		errors.</shortdesc>
	<prolog class="- topic/prolog ">
		<permissions class="- topic/permissions " view="nonconfidential"/>
		
	</prolog>
	<refbody class="- topic/body        reference/refbody ">
		<section class="- topic/section ">
			<p class="- topic/p ">In the <ph class="- topic/ph "><keyword class="- topic/keyword "><tm class="- topic/tm " tmtype="reg">Cortex</tm></keyword><keyword class="- topic/keyword ">â€‘A76</keyword></ph> core, the <codeph class="+ topic/ph pr-d/codeph ">ESB</codeph>
				instruction allows efficient isolation of errors:</p>
			<ul class="- topic/ul ">
				<li class="- topic/li ">The <codeph class="+ topic/ph pr-d/codeph ">ESB</codeph> instruction does not
					wait for completion of accesses that cannot generate an asynchronous external
					abort. For example, if all external aborts are handled synchronously or it is
					known that no such accesses are outstanding.</li>
				<li class="- topic/li ">The <codeph class="+ topic/ph pr-d/codeph ">ESB</codeph> instruction does not
					order accesses and does not guarantee a pipeline flush.</li>
			</ul>
			<p class="- topic/p ">All system errors must be synchronized by an <codeph class="+ topic/ph pr-d/codeph ">ESB</codeph> instruction, which guarantees the following:</p>
			<ul class="- topic/ul ">
				<li class="- topic/li ">All system errors that are generated before the <codeph class="+ topic/ph pr-d/codeph ">ESB</codeph> instruction have pended a <term class="- topic/term ">System Error Interrupts</term> (SEI) exception.</li>
				<li class="- topic/li ">If a physical SEI is pended by or was pending before the <codeph class="+ topic/ph pr-d/codeph ">ESB</codeph> instruction executes, then: <ul class="- topic/ul ">
					<li class="- topic/li ">It is taken before completion of the <codeph class="+ topic/ph pr-d/codeph ">ESB</codeph> instruction, if the physical SEI
						exception is unmasked at the current Exception level.</li>
					<li class="- topic/li ">The pending SEI is cleared, the SEI status is recorded
						in DISR_EL1, and DISR_EL1.A is set to 1 if the physical SEI
						exception is masked at the current Exception level. It indicates that
						the SEI exception was generated before the <codeph class="+ topic/ph pr-d/codeph ">ESB</codeph> instruction by instructions that occur in program
						order.</li>
				</ul></li>
				<li class="- topic/li ">If a virtual SEI is pended by or was pending before the <codeph class="+ topic/ph pr-d/codeph ">ESB</codeph> instruction executes, then: <ul class="- topic/ul ">
					<li class="- topic/li ">It is taken before completion of the <codeph class="+ topic/ph pr-d/codeph ">ESB</codeph> instruction, if the virtual SEI
						exception is unmasked.</li>
					<li class="- topic/li ">The pending virtual SEI is cleared and the SEI status is
						recorded in VDISR_EL2 using the information provided by software
						in VSESR_EL2, if the virtual SEI exception is masked.</li>
				</ul></li>
			</ul>
			<p class="- topic/p ">After the <codeph class="+ topic/ph pr-d/codeph ">ESB</codeph> instruction, one of
				the following scenarios occurs:</p>
			<ul class="- topic/ul ">
				<li class="- topic/li ">SEIs pended by errors are taken and their status is recorded in ESR_ELn.</li>
				<li class="- topic/li ">SEIs pended by errors are deferred and their status is recorded
					in DISR_EL1 or VDISR_EL2.</li>
			</ul>
			<p class="- topic/p ">This includes unrecoverable SEIs that are generated by instructions,
				translation table walks, and instruction fetches on the same core.</p>
			<note class="- topic/note "><p class="- topic/p ">DISR_EL1 can only be accessed at EL1 and above. If EL2 is
				implemented and HCR_EL2.AMO is set to 1, then reads and writes of DISR_EL1
				at Non-secure EL1 access VDISR_EL2.</p>
				
				<p class="- topic/p ">See the following registers:</p>
				<ul class="- topic/ul ">
					<li class="- topic/li "><xref class="- topic/xref " href="lau1457099740111.xml" keyref="DisrEl1DeferredInterruptStatusRegisterEl1" type="reference">DISR_EL1, Deferred Interrupt Status Register, EL1<desc class="- topic/desc ">The DISR_EL1 records the SError interrupts consumed by an <codeph class="+ topic/ph pr-d/codeph ">ESB</codeph> instruction. </desc></xref>.</li>
					<li class="- topic/li "><xref class="- topic/xref " href="lau1443436588351.xml" keyref="HcrEl2HypervisorConfigurationRegisterEl2" type="reference">HCR_EL2, Hypervisor Configuration Register, EL2<desc class="- topic/desc ">The HCR_EL2 provides configuration control for virtualization, including     whether various Non-secure operations are trapped to EL2.</desc></xref>.</li>
					<li class="- topic/li "><xref class="- topic/xref " href="lau1457099519678.xml" keyref="VdisrEl2VirtualDeferredInterruptStatusRegisterEl2" type="reference">VDISR_EL2, Virtual Deferred Interrupt Status Register, EL2<desc class="- topic/desc ">The VDISR_EL2 records that a virtual SError interrupt has been consumed 		by an <codeph class="+ topic/ph pr-d/codeph ">ESB</codeph> instruction executed at Non-secure 		EL1.</desc></xref>.</li>
				</ul>
			</note>
		</section>
	</refbody>
</reference>