<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference
  PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" class="- topic/topic       reference/reference " ditaarch:DITAArchVersion="1.2" id="vwh1474025890586" xml:lang="en-us">
  <title class="- topic/title ">PMCR, Performance Monitors Control Register</title>
  <shortdesc class="- topic/shortdesc ">The PMCR provides details of the Performance Monitors implementation,
    including the number of counters implemented, and configures and controls the
    counters.</shortdesc>
  <prolog class="- topic/prolog ">
    <permissions class="- topic/permissions " view="nonconfidential"/>
  </prolog>
  <refbody class="- topic/body        reference/refbody ">
    <section class="- topic/section ">
      <title class="- topic/title ">Bit field descriptions</title>
      <p class="- topic/p ">PMCR is a 32-bit register, and is part of the Performance Monitors
        registers functional group.</p>
      <fig class="- topic/fig " id="fig_oyw_rpd_gv">
        <title class="- topic/title ">PMCR bit assignments</title>
        <image class="- topic/image " href="joh1459956643830.svg" id="image_w1x_rpd_gv" placement="inline">
          <alt class="- topic/alt ">PMCR bit assignments</alt>
        </image>
      </fig>
      <dl class="- topic/dl ">
        <dlentry class="- topic/dlentry ">
          <dt class="- topic/dt ">IMP, [31:24]</dt>
          <dd class="- topic/dd ">
            <p class="- topic/p ">Indicates the implementer code. The value is:</p>
            <dl class="- topic/dl " compact="yes" outputclass="termwidthpc12">
              <dlentry class="- topic/dlentry ">
                <dt class="- topic/dt ">
                  <ph class="- topic/ph " otherprops="g.number.hex">41</ph>
                </dt>
                <dd class="- topic/dd "> ASCII character 'A' - implementer is <keyword class="- topic/keyword "><tm class="- topic/tm " tmtype="reg">Arm</tm></keyword> Limited. </dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
        <dlentry class="- topic/dlentry ">
          <dt class="- topic/dt ">IDCODE, [23:16]</dt>
          <dd class="- topic/dd ">
            <p class="- topic/p ">Identification code. The value is:</p>
            <dl class="- topic/dl " compact="yes" outputclass="termwidthpc12">
              <dlentry class="- topic/dlentry ">
                <dt class="- topic/dt ">  <ph class="- topic/ph " otherprops="g.number.hex">0B</ph> </dt>
                <dd class="- topic/dd "><ph class="- topic/ph "><keyword class="- topic/keyword "><tm class="- topic/tm " tmtype="reg">Cortex</tm></keyword><keyword class="- topic/keyword ">â€‘A76</keyword></ph> core.</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
        <dlentry class="- topic/dlentry ">
          <dt class="- topic/dt ">N, [15:11]</dt>
          <dd class="- topic/dd ">
            <p class="- topic/p ">Identifies the number of event counters implemented.</p>
            <dl class="- topic/dl " compact="yes" outputclass="termwidthpc12">
              <dlentry class="- topic/dlentry ">
                <dt class="- topic/dt "><codeph class="+ topic/ph pr-d/codeph " otherprops="g.number.bin">00110</codeph></dt>
                <dd class="- topic/dd ">The core implements six event counters.</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
        <dlentry class="- topic/dlentry ">
          <dt class="- topic/dt ">RES0, [10:7]</dt>
          <dd class="- topic/dd ">
            <dl class="- topic/dl " compact="yes" outputclass="termwidthpc12">
              <dlentry class="- topic/dlentry ">
                <dt class="- topic/dt "><term class="- topic/term " outputclass="archterm">res0</term></dt>
                <dd class="- topic/dd ">Reserved.</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
        <dlentry class="- topic/dlentry ">
          <dt class="- topic/dt ">LC, [6]</dt>
          <dd class="- topic/dd ">
            <p class="- topic/p ">Long cycle count enable. Determines which PMCCNTR bit generates an
              overflow recorded in PMOVSR[31]. The overflow event is generated on a 32-bit or 64-bit
              boundary. The possible values are:</p>
            <dl class="- topic/dl " compact="yes" outputclass="termwidthpc12">
              <dlentry class="- topic/dlentry ">
                <dt class="- topic/dt "><codeph class="+ topic/ph pr-d/codeph " otherprops="g.number.bin">0</codeph></dt>
                <dd class="- topic/dd ">Overflow event is generated on a 32-bit boundary, when an
                  increment changes PMCCNTR[31] from 1 to 0. This is the reset value.</dd>
              </dlentry>
              <dlentry class="- topic/dlentry ">
                <dt class="- topic/dt "><codeph class="+ topic/ph pr-d/codeph " otherprops="g.number.bin">1</codeph></dt>
                <dd class="- topic/dd ">Overflow event is generated on a 64-bit boundary, when an
                  increment changes PMCCNTR[63] from 1 to 0.</dd>
              </dlentry>
            </dl>
            <p class="- topic/p "><keyword class="- topic/keyword ">Arm</keyword> deprecates use of PMCR.LC = <ph class="- topic/ph " otherprops="g.number.bin">0</ph>.</p>
          </dd>
        </dlentry>
        <dlentry class="- topic/dlentry ">
          <dt class="- topic/dt ">DP, [5]</dt>
          <dd class="- topic/dd ">
            <p class="- topic/p ">Disable cycle counter CCNT when event counting is prohibited. The
              possible values are:</p>
            <dl class="- topic/dl " compact="yes" outputclass="termwidthpc12">
              <dlentry class="- topic/dlentry ">
                <dt class="- topic/dt "><codeph class="+ topic/ph pr-d/codeph " otherprops="g.number.bin">0</codeph></dt>
                <dd class="- topic/dd ">Cycle counter operates regardless of the non-invasive debug
                  authentication settings. This is the reset value.</dd>
              </dlentry>
              <dlentry class="- topic/dlentry ">
                <dt class="- topic/dt "><codeph class="+ topic/ph pr-d/codeph " otherprops="g.number.bin">1</codeph></dt>
                <dd class="- topic/dd ">Cycle counter is disabled if non-invasive debug is not
                  permitted and enabled.</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
        <dlentry class="- topic/dlentry ">
          <dt class="- topic/dt ">X, [4]</dt>
          <dd class="- topic/dd ">
            <p class="- topic/p ">Export enable. This bit permits events to be exported to another
              debug device, such as a trace macrocell, over an event bus. The possible values
              are:</p>
            <dl class="- topic/dl " compact="yes" outputclass="termwidthpc12">
              <dlentry class="- topic/dlentry ">
                <dt class="- topic/dt "><codeph class="+ topic/ph pr-d/codeph " otherprops="g.number.bin">0</codeph></dt>
                <dd class="- topic/dd ">Export of events is disabled. This is the reset value.</dd>
              </dlentry>
              <dlentry class="- topic/dlentry ">
                <dt class="- topic/dt "><codeph class="+ topic/ph pr-d/codeph " otherprops="g.number.bin">1</codeph></dt>
                <dd class="- topic/dd ">Export of events is enabled.</dd>
              </dlentry>
            </dl>
            <p class="- topic/p ">No events are exported when counting is prohibited.</p>
            <p class="- topic/p ">This field does not affect the generation of Performance Monitors
              overflow interrupt requests or signaling to a cross-trigger interface (CTI) that can
              be implemented as signals exported from the PE.</p>
            <p class="- topic/p ">When this register has an architecturally defined reset value, if
              this field is implemented as an RW field, it resets to 0.</p>
          </dd>
        </dlentry>
        <dlentry class="- topic/dlentry ">
          <dt class="- topic/dt ">D, [3]</dt>
          <dd class="- topic/dd ">
            <p class="- topic/p ">Clock divider. The possible values are:</p>
            <dl class="- topic/dl " compact="yes" outputclass="termwidthpc12">
              <dlentry class="- topic/dlentry ">
                <dt class="- topic/dt "><codeph class="+ topic/ph pr-d/codeph " otherprops="g.number.bin">0</codeph></dt>
                <dd class="- topic/dd ">When enabled, counter CCNT counts every clock cycle. This is
                  the reset value.</dd>
              </dlentry>
              <dlentry class="- topic/dlentry ">
                <dt class="- topic/dt "><codeph class="+ topic/ph pr-d/codeph " otherprops="g.number.bin">1</codeph></dt>
                <dd class="- topic/dd ">When enabled, counter CCNT counts once every 64 clock
                  cycles.</dd>
              </dlentry>
            </dl>
            <p class="- topic/p "><keyword class="- topic/keyword ">Arm</keyword> deprecates use of PMCR.D = <ph class="- topic/ph " otherprops="g.number.bin">1</ph>.</p>
          </dd>
        </dlentry>
        <dlentry class="- topic/dlentry ">
          <dt class="- topic/dt ">C, [2]</dt>
          <dd class="- topic/dd ">
            <p class="- topic/p ">Cycle counter reset. This bit is WO. The effects of writing to this
              bit are:</p>
            <dl class="- topic/dl " compact="yes" outputclass="termwidthpc12">
              <dlentry class="- topic/dlentry ">
                <dt class="- topic/dt "><codeph class="+ topic/ph pr-d/codeph " otherprops="g.number.bin">0</codeph></dt>
                <dd class="- topic/dd ">No action. This is the reset value.</dd>
              </dlentry>
              <dlentry class="- topic/dlentry ">
                <dt class="- topic/dt "><codeph class="+ topic/ph pr-d/codeph " otherprops="g.number.bin">1</codeph></dt>
                <dd class="- topic/dd ">Reset PMCCNTR to zero.</dd>
              </dlentry>
            </dl>
            <p class="- topic/p ">This bit is always RAZ.</p>
            <p class="- topic/p ">Resetting PMCCNTR does not clear the PMCCNTR overflow bit to 0. See
              the <cite class="- topic/cite "><ph class="- topic/ph ">
                            <keyword class="- topic/keyword "><tm class="- topic/tm " tmtype="reg">Arm</tm></keyword> Architecture Reference Manual <keyword class="- topic/keyword ">Arm</keyword>v8, for <keyword class="- topic/keyword ">Arm</keyword>v8-A architecture profile</ph></cite> for more
              information.</p>
          </dd>
        </dlentry>
        <dlentry class="- topic/dlentry ">
          <dt class="- topic/dt ">P, [1]</dt>
          <dd class="- topic/dd ">
            <p class="- topic/p ">Event counter reset. This bit is WO. The effects of writing to this
              bit are:</p>
            <dl class="- topic/dl " compact="yes" outputclass="termwidthpc12">
              <dlentry class="- topic/dlentry ">
                <dt class="- topic/dt "><ph class="- topic/ph " otherprops="g.number.bin">0</ph></dt>
                <dd class="- topic/dd ">No action. This is the reset value.</dd>
              </dlentry>
              <dlentry class="- topic/dlentry ">
                <dt class="- topic/dt "><ph class="- topic/ph " otherprops="g.number.bin">1</ph></dt>
                <dd class="- topic/dd ">Reset all event counters accessible in the current EL, not
                  including PMCCNTR, to zero.</dd>
              </dlentry>
            </dl>
            <p class="- topic/p ">This bit is always RAZ.</p>
            <p class="- topic/p ">In Non-secure EL0 and EL1, a write of 1 to this bit does not reset
              event counters that HDCR.HPMN or MDCR_EL2.HPMN reserves for EL2 use.</p>
            <p class="- topic/p ">In EL2 and EL3, a write of 1 to this bit resets all the event
              counters.</p>
            <p class="- topic/p ">Resetting the event counters does not clear any overflow bits to
              0.</p>
          </dd>
        </dlentry>
        <dlentry class="- topic/dlentry ">
          <dt class="- topic/dt ">E, [0]</dt>
          <dd class="- topic/dd ">
            <p class="- topic/p ">Enable. The possible values are:</p>
            <dl class="- topic/dl " compact="yes" outputclass="termwidthpc12">
              <dlentry class="- topic/dlentry ">
                <dt class="- topic/dt "><codeph class="+ topic/ph pr-d/codeph " otherprops="g.number.bin">0</codeph></dt>
                <dd class="- topic/dd ">All counters that are accessible at Non-secure EL1, including
                  PMCCNTR, are disabled. This is the reset value.</dd>
              </dlentry>
              <dlentry class="- topic/dlentry ">
                <dt class="- topic/dt "><codeph class="+ topic/ph pr-d/codeph " otherprops="g.number.bin">1</codeph></dt>
                <dd class="- topic/dd ">When this register has an architecturally defined reset value,
                  this field resets to 0.</dd>
              </dlentry>
            </dl>
            <p class="- topic/p ">This bit is RW.</p>
            <p class="- topic/p ">This bit does not affect the operation of event counters that
              HDCR.HPMN or MDCR_EL2.HPMN reserves for EL2 use.</p>
            <p class="- topic/p ">When this register has an architecturally defined reset value, this
              field resets to 0.</p>
          </dd>
        </dlentry>
      </dl>
      <dl class="- topic/dl ">
        <dlentry class="- topic/dlentry ">
          <dt class="- topic/dt ">Configurations</dt>
          <dd class="- topic/dd ">
            <p class="- topic/p ">AArch32 System register PMCR is architecturally mapped to AArch64
              System register PMCR_EL0. See <xref class="- topic/xref " href="evu1477587576653.xml" keyref="PmcrEl0PerformanceMonitorsControlRegisterEL0" type="reference">PMCR_EL0, Performance Monitors Control Register, EL0<desc class="- topic/desc ">The PMCR_EL0 provides details of the Performance Monitors     implementation, including the number of counters implemented, and configures and controls the     counters.</desc></xref>.</p>
            <p class="- topic/p ">AArch32 System register PMCR bits [6:0] are architecturally mapped
              to External register PMCR_EL0[6:0].</p>
            <p class="- topic/p ">There is one instance of this register that is used in both Secure
              and Non-secure states.</p>
            <p class="- topic/p ">This register is in the Warm reset domain. Some or all RW fields of
              this register have defined reset values. On a Warm or Cold reset these apply only if
              the PE resets into an Exception level that is using AArch32. Otherwise, on a Warm or
              Cold reset RW fields in this register reset to architecturally <term class="- topic/term " outputclass="archterm">UNKNOWN</term> values.</p>
          </dd>
        </dlentry>
      </dl>
    </section>
    
  </refbody>
</reference>