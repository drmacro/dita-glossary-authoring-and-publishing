<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference
  PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" class="- topic/topic       reference/reference " ditaarch:DITAArchVersion="1.2" id="ste1440492981297" xml:lang="en-us">
  <title class="- topic/title ">Data prefetching</title>
  
  <shortdesc class="- topic/shortdesc ">This section describes the data prefetching behavior for the <ph class="- topic/ph "><keyword class="- topic/keyword "><tm class="- topic/tm " tmtype="reg">Cortex</tm></keyword><keyword class="- topic/keyword ">‑A76</keyword></ph> core.</shortdesc>
  <prolog class="- topic/prolog ">
    <permissions class="- topic/permissions " view="nonconfidential"/>
  </prolog>
  <refbody class="- topic/body        reference/refbody ">
    <section class="- topic/section ">
      <title class="- topic/title ">Preload instructions</title>
      <p class="- topic/p ">The <ph class="- topic/ph "><keyword class="- topic/keyword "><tm class="- topic/tm " tmtype="reg">Cortex</tm></keyword><keyword class="- topic/keyword ">‑A76</keyword></ph>
        core supports the AArch64 <term class="- topic/term ">Prefetch Memory</term> (<codeph class="+ topic/ph pr-d/codeph ">PRFM</codeph>) instructions and the AArch32 <term class="- topic/term ">Prefetch
          Data</term> (<codeph class="+ topic/ph pr-d/codeph ">PLD</codeph>) and  <term class="- topic/term ">Preload Data
            With Intent To Write</term> (<codeph class="+ topic/ph pr-d/codeph ">PLDW</codeph>) instructions. These
        instructions signal to the memory system that memory accesses from a specified address are
        likely to occur soon. The memory system acts by taking actions that aim to reduce the
        latency of the memory access when they occur. <codeph class="+ topic/ph pr-d/codeph ">PRFM</codeph>
        instructions perform a lookup in the cache, and if they miss and are to a cacheable address,
        a linefill starts. However, the <codeph class="+ topic/ph pr-d/codeph ">PRFM</codeph> instruction retires
        when its linefill is started, rather than waiting for the linefill to complete. This enables
        other instructions to execute while the linefill continues in the background.</p>
      
      <p class="- topic/p ">The <term class="- topic/term ">Preload Instruction</term> (<codeph class="+ topic/ph pr-d/codeph ">PLI</codeph>) memory system hint performs preloading in the L2 cache for
        cacheable accesses if they miss in both the L1 instruction cache and L2 cache. Instruction
        preloading is performed in the background. </p>
      <p class="- topic/p ">For more information about prefetch memory and preloading caches, see the
        <cite class="- topic/cite "><ph class="- topic/ph ">
                            <keyword class="- topic/keyword "><tm class="- topic/tm " tmtype="reg">Arm</tm></keyword> Architecture Reference Manual <keyword class="- topic/keyword ">Arm</keyword>v8, for <keyword class="- topic/keyword ">Arm</keyword>v8-A architecture profile</ph></cite>.</p>
    </section>
    
    <section class="- topic/section ">
            <title class="- topic/title ">Data prefetching and monitoring</title>
            <p class="- topic/p ">The load-store unit includes a hardware prefetcher that is
                responsible for generating prefetches targeting both the L1 and the L2 cache. The
                load side prefetcher uses the virtual address to prefetch to both the L1 and L2
                Cache. The store side prefetcher uses the physical address, and only prefetches to
                the L2 Cache. </p>
            <p class="- topic/p ">The CPUECTLR register allows you to have some control over the prefetcher.
                See <xref class="- topic/xref " href="vrj1494872408498.xml" keyref="CpuectlrCpuExtendedControlRegister" type="reference">CPUECTLR_EL1, CPU Extended Control Register, EL1<desc class="- topic/desc ">The CPUECTLR_EL1 provides additional <term class="- topic/term " outputclass="archterm">IMPLEMENTATION DEFINED</term> configuration and control options 		for the core.</desc></xref> for more information
                on the control of the prefetcher.</p>
            <p class="- topic/p ">Use the prefetch memory system instructions for data prefetching where
                short sequences or irregular pattern fetches are required.</p>
        </section>
    
    
    <section class="- topic/section ">
      <title class="- topic/title ">Data cache zero</title>
      <p class="- topic/p ">The Armv8-A architecture introduces a <term class="- topic/term ">Data Cache Zero
          by Virtual Address</term> (<codeph class="+ topic/ph pr-d/codeph ">DC ZVA</codeph>) instruction.</p>
      <p class="- topic/p ">In the <ph class="- topic/ph "><keyword class="- topic/keyword "><tm class="- topic/tm " tmtype="reg">Cortex</tm></keyword><keyword class="- topic/keyword ">‑A76</keyword></ph>
        core, this enables a block of 64 bytes in memory, aligned to 64 bytes in size, to be
        set to zero. </p>
      <p class="- topic/p ">For more information, see the <cite class="- topic/cite "><ph class="- topic/ph ">
                            <keyword class="- topic/keyword "><tm class="- topic/tm " tmtype="reg">Arm</tm></keyword> Architecture Reference Manual <keyword class="- topic/keyword ">Arm</keyword>v8, for <keyword class="- topic/keyword ">Arm</keyword>v8-A architecture profile</ph></cite>.</p>
    </section>
  </refbody>
</reference>