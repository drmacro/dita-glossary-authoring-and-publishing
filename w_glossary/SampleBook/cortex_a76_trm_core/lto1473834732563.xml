<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference
  PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" class="- topic/topic       reference/reference " ditaarch:DITAArchVersion="1.2" id="lto1473834732563" xml:lang="en-us">
	<title class="- topic/title ">Write streaming mode</title>
	<shortdesc class="- topic/shortdesc ">A cache line is allocated to the L1 on either a read miss or a write
		miss.</shortdesc>
	<prolog class="- topic/prolog ">
		<permissions class="- topic/permissions " view="nonconfidential"/>
		</prolog>
	<refbody class="- topic/body        reference/refbody ">
		<section class="- topic/section ">
			<p class="- topic/p ">However, there are some situations where allocating on writes is not required. For example,
				when executing the C standard library <codeph class="+ topic/ph pr-d/codeph ">memset</codeph>() function to clear a
				large block of memory to a known value. Writes of large blocks of data can pollute
				the cache with unnecessary data. It can also waste power and performance if a
				linefill must be performed only to discard the linefill data because the entire line
				was subsequently written by the <codeph class="+ topic/ph pr-d/codeph ">memset</codeph>().</p>
			<p class="- topic/p ">To counter this, the L1 memory system includes logic to detect when the core has stores
				pending to a full cache line when it is waiting for a linefill to complete, or when
				it detects a <codeph class="+ topic/ph pr-d/codeph ">DCZVA</codeph> (full cache line write to zero). If this
				situation is detected, then it switches into write streaming mode.</p>
			<p class="- topic/p ">When in write streaming mode, loads behave as normal, and can still cause linefills, and writes still lookup in the cache, but if they miss then they write out to L2 (or possibly <ph class="- topic/ph ">L3, system cache, or DRAM</ph>) rather than starting a linefill.</p>
			
			<p class="- topic/p ">The L1 memory system continues in write streaming mode until it can no longer create a full
				cacheline of store (for example because of a lack of resource in the L1 memory
				system) or has detected a high proportion of store hitting in the cache.</p>
			
			<note class="- topic/note ">The L1 memory system is monitoring transaction traffic through L1 and, depending on different thresholds, can set a stream to go out to L2, L3, and system cache and DRAM.</note>
			
			<p class="- topic/p ">The following registers control the different thresholds:</p>
			<dl class="- topic/dl ">
				
				<dlentry class="- topic/dlentry ">
					<dt class="- topic/dt ">AArch64 state</dt>
					<dd class="- topic/dd ">CPUECTLR_EL1 configure the L2, L3, and system cache write streaming mode threshold. See <xref class="- topic/xref " href="vrj1494872408498.xml" keyref="CpuectlrEl1CpuExtendedControlRegisterEl1" type="reference">CPUECTLR_EL1, CPU Extended Control Register, EL1<desc class="- topic/desc ">The CPUECTLR_EL1 provides additional <term class="- topic/term " outputclass="archterm">IMPLEMENTATION DEFINED</term> configuration and control options 		for the core.</desc></xref>.</dd>
				</dlentry>
				
			</dl>
		</section>
	</refbody>
</reference>